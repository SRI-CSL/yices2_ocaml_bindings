(* Manually added abbreviations *)

type mpz_s = [ `anonymous ] Ctypes.structure
type mpq_s = [ `anonymous_0 ] Ctypes.structure

type mpz_ptr = mpz_s Ctypes.ptr
type mpq_ptr = mpq_s Ctypes.ptr

type mpz_t = mpz_s Ctypes_static.carray
type mpq_t = mpq_s Ctypes_static.carray

(* Automatically generated by ctypes-of-clang *)

module TMP = struct

  let anonymous_7 =
    let (_ctype : mpz_s Ctypes.typ) =
      Ctypes.structure "" in
    _ctype
  let anonymous_8 =
    let (_ctype : mpq_s Ctypes.typ) =
      Ctypes.structure "" in
    _ctype
  let __mpz_struct = Ctypes.typedef anonymous_7 "__mpz_struct"
  let mpz_ptr : mpz_ptr Ctypes.typ = Ctypes.typedef (Ctypes.ptr __mpz_struct) "mpz_ptr"
  let mpz_t   : mpz_t Ctypes.typ   = Ctypes.typedef (Ctypes.array 1 __mpz_struct) "mpz_t"
  (* let mp_size_t = Ctypes.typedef Ctypes.long "mp_size_t"
   * let mp_exp_t = Ctypes.typedef Ctypes.long "mp_exp_t" *)

  let mp_limb_t = Ctypes.typedef Ctypes.ulong "mp_limb_t"
  let anonymous =
    let field_0 = Ctypes.field anonymous_7 "_mp_alloc" Ctypes.sint in
    let field_1 = Ctypes.field anonymous_7 "_mp_size" Ctypes.sint in
    let field_2 = Ctypes.field anonymous_7 "_mp_d" (Ctypes.ptr mp_limb_t) in
    let () = Ctypes.seal anonymous_7 in
    object
      method ctype = anonymous_7
      method members =
        object
          method _mp_alloc = field_0
          method _mp_size = field_1
          method _mp_d = field_2
        end
    end

  let anonymous_0 =
    let field_0 = Ctypes.field anonymous_8 "_mp_num" __mpz_struct in
    let field_1 = Ctypes.field anonymous_8 "_mp_den" __mpz_struct in
    let () = Ctypes.seal anonymous_8 in
    object
      method ctype = anonymous_8
      method members =
        object method _mp_num = field_0 method _mp_den = field_1 end
    end

  let __mpq_struct = Ctypes.typedef anonymous_8 "__mpq_struct"
  let mpq_t : mpq_t Ctypes.typ = Ctypes.typedef (Ctypes.array 1 __mpq_struct) "mpq_t"

  (* let intnat = Ctypes.typedef Ctypes.long "intnat"
   * let value = Ctypes.typedef intnat "value" *)

  (* let foreign name typ = Foreign.foreign name typ
   *     ~from:Dl.(dlopen ~filename:"zarith.cmxs" ~flags:[RTLD_NOW])
   * 
   * let ml_z_mpz_set_z =
   *   Foreign.foreign "ml_z_mpz_set_z"
   *     (Ctypes.(@->) mpz_t
   *        (Ctypes.(@->) value (Ctypes.returning Ctypes.void)))
   * let ml_z_mpz_init_set_z =
   *   Foreign.foreign "ml_z_mpz_init_set_z"
   *     (Ctypes.(@->) mpz_t
   *        (Ctypes.(@->) value (Ctypes.returning Ctypes.void)))
   * let ml_z_from_mpz =
   *   Foreign.foreign "ml_z_from_mpz"
   *     (Ctypes.(@->) mpz_t (Ctypes.returning value)) *)

end
include TMP

(* let prefix = "#include <zarith.h>
 * "
 * let h = Cstubs.write_c Containers.Format.stdout ~prefix (module TMP) *)


(* Manually added functions *)

let numerator (q : mpq_t) =
  let content = Ctypes.getf (Ctypes.CArray.get q 0) anonymous_0#members#_mp_num in
  Ctypes.CArray.make __mpz_struct ~initial:content 1

let denumerator (q : mpq_t) =
  let content = Ctypes.getf (Ctypes.CArray.get q 0) anonymous_0#members#_mp_den in
  Ctypes.CArray.make __mpz_struct ~initial:content 1

let rational num den =
  let content = Ctypes.make __mpq_struct in
  Ctypes.setf content anonymous_0#members#_mp_num num;
  Ctypes.setf content anonymous_0#members#_mp_den den;
  Ctypes.CArray.make __mpq_struct ~initial:content 1
